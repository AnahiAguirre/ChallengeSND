@inject IJSRuntime js

@page "/login"

<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Login</h2>
            <EditForm Model="@LoginDto" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="from-label" for="email">Email</label>
                    <InputText id="email" @bind-Value="LoginDto.Email" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="LoginDto.Password" type="password" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code {
    public LoginDTO LoginDto = new();

    async Task LoginClicked()
    {
        // LoginResponse.LoginResponse response = await accountService.LoginAsync(LoginDto);
        // if (!response.Flag)
        // {
        //     await js.InvokeVoidAsync("alert", response.Message);
        //     return;
        // }

        // var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        // customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}